{"ast":null,"code":"'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\n\nfunction http(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }; // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\r\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\r\n     *\r\n     * @param {string} contentType\r\n     * @returns {string}\r\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n\n    var options;\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType] = {\n          pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        };\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options);\n    }\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/lyncovid19-frontend-vercel/node_modules/refractor/lang/http.js"],"names":["module","exports","http","displayName","aliases","Prism","languages","pattern","inside","property","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","rest","insertBefore"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAASA,KAAT,EAAgB;AAChBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;AACrB,sBAAgB;AACdK,QAAAA,OAAO,EAAE,6FADK;AAEdC,QAAAA,MAAM,EAAE;AACN;AACAC,UAAAA,QAAQ,EAAE,wDAFJ;AAGN;AACA,uBAAa;AAJP;AAFM,OADK;AAUrB,yBAAmB;AACjBF,QAAAA,OAAO,EAAE,sBADQ;AAEjBC,QAAAA,MAAM,EAAE;AACN;AACAC,UAAAA,QAAQ,EAAE;AACRF,YAAAA,OAAO,EAAE,wBADD;AAERG,YAAAA,UAAU,EAAE;AAFJ;AAFJ;AAFS,OAVE;AAoBrB;AACA,qBAAe;AACbH,QAAAA,OAAO,EAAE,gBADI;AAEbI,QAAAA,KAAK,EAAE;AAFM;AArBM,KAAvB,CADgB,CA0Bd;;AACF,QAAIC,KAAK,GAAGP,KAAK,CAACC,SAAlB;AACA,QAAIO,aAAa,GAAG;AAClB,gCAA0BD,KAAK,CAACE,UADd;AAElB,0BAAoBF,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACE,UAFtB;AAGlB,yBAAmBF,KAAK,CAACI,GAHP;AAIlB,kBAAYJ,KAAK,CAACI,GAJA;AAKlB,mBAAaJ,KAAK,CAACK,IALD;AAMlB,kBAAYL,KAAK,CAACM;AANA,KAApB,CA5BgB,CAmCd;;AACF,QAAIC,WAAW,GAAG;AAChB,0BAAoB,IADJ;AAEhB,yBAAmB;AAFH,KAAlB;AAIA;;;;;;;AAMA,aAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACrC,UAAIC,MAAM,GAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAb;AACA,UAAIC,aAAa,GAAG,0BAA0BF,MAA1B,GAAmC,cAAvD;AACA,aAAO,QAAQD,WAAR,GAAsB,GAAtB,GAA4BG,aAA5B,GAA4C,GAAnD;AACD,KAlDe,CAkDd;AACF;;;AACA,QAAIC,OAAJ;;AACA,SAAK,IAAIJ,WAAT,IAAwBR,aAAxB,EAAuC;AACrC,UAAIA,aAAa,CAACQ,WAAD,CAAjB,EAAgC;AAC9BI,QAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,YAAIlB,OAAO,GAAGY,WAAW,CAACE,WAAD,CAAX,GACVD,gBAAgB,CAACC,WAAD,CADN,GAEVA,WAFJ;AAGAI,QAAAA,OAAO,CAACJ,WAAD,CAAP,GAAuB;AACrBd,UAAAA,OAAO,EAAEmB,MAAM,CACb,uBACEnB,OADF,GAEE,wCAHW,EAIb,GAJa,CADM;AAOrBG,UAAAA,UAAU,EAAE,IAPS;AAQrBF,UAAAA,MAAM,EAAE;AACNmB,YAAAA,IAAI,EAAEd,aAAa,CAACQ,WAAD;AADb;AARa,SAAvB;AAYD;AACF;;AACD,QAAII,OAAJ,EAAa;AACXpB,MAAAA,KAAK,CAACC,SAAN,CAAgBsB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoDH,OAApD;AACD;AACF,GA5EA,EA4EEpB,KA5EF;AA6EF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = http\r\nhttp.displayName = 'http'\r\nhttp.aliases = []\r\nfunction http(Prism) {\r\n  ;(function(Prism) {\r\n    Prism.languages.http = {\r\n      'request-line': {\r\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\r\n        inside: {\r\n          // HTTP Verb\r\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\r\n          // Path or query argument\r\n          'attr-name': /:\\w+/\r\n        }\r\n      },\r\n      'response-status': {\r\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\r\n        inside: {\r\n          // Status, e.g. 200 OK\r\n          property: {\r\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      },\r\n      // HTTP header name\r\n      'header-name': {\r\n        pattern: /^[\\w-]+:(?=.)/m,\r\n        alias: 'keyword'\r\n      }\r\n    } // Create a mapping of Content-Type headers to language definitions\r\n    var langs = Prism.languages\r\n    var httpLanguages = {\r\n      'application/javascript': langs.javascript,\r\n      'application/json': langs.json || langs.javascript,\r\n      'application/xml': langs.xml,\r\n      'text/xml': langs.xml,\r\n      'text/html': langs.html,\r\n      'text/css': langs.css\r\n    } // Declare which types can also be suffixes\r\n    var suffixTypes = {\r\n      'application/json': true,\r\n      'application/xml': true\r\n    }\r\n    /**\r\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\r\n     *\r\n     * @param {string} contentType\r\n     * @returns {string}\r\n     */\r\n    function getSuffixPattern(contentType) {\r\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\r\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\r\n      return '(?:' + contentType + '|' + suffixPattern + ')'\r\n    } // Insert each content type parser that has its associated language\r\n    // currently loaded.\r\n    var options\r\n    for (var contentType in httpLanguages) {\r\n      if (httpLanguages[contentType]) {\r\n        options = options || {}\r\n        var pattern = suffixTypes[contentType]\r\n          ? getSuffixPattern(contentType)\r\n          : contentType\r\n        options[contentType] = {\r\n          pattern: RegExp(\r\n            '(content-type:\\\\s*' +\r\n              pattern +\r\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\r\n            'i'\r\n          ),\r\n          lookbehind: true,\r\n          inside: {\r\n            rest: httpLanguages[contentType]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (options) {\r\n      Prism.languages.insertBefore('http', 'header-name', options)\r\n    }\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}