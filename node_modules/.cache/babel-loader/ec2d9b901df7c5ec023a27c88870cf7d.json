{"ast":null,"code":"'use strict';\n\nmodule.exports = python;\npython.displayName = 'python';\npython.aliases = ['py'];\n\nfunction python(Prism) {\n  Prism.languages.python = {\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true\n    },\n    'string-interpolation': {\n      pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n      greedy: true,\n      inside: {\n        interpolation: {\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n          pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n          lookbehind: true,\n          inside: {\n            'format-spec': {\n              pattern: /(:)[^:(){}]+(?=}$)/,\n              lookbehind: true\n            },\n            'conversion-option': {\n              pattern: /![sra](?=[:}]$)/,\n              alias: 'punctuation'\n            },\n            rest: null\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    },\n    'triple-quoted-string': {\n      pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n      greedy: true,\n      alias: 'string'\n    },\n    string: {\n      pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n      greedy: true\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n      lookbehind: true\n    },\n    'class-name': {\n      pattern: /(\\bclass\\s+)\\w+/i,\n      lookbehind: true\n    },\n    decorator: {\n      pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n      lookbehind: true,\n      alias: ['annotation', 'punctuation'],\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    boolean: /\\b(?:True|False|None)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n  };\n  Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\n  Prism.languages.py = Prism.languages.python;\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/refractor/lang/python.js"],"names":["module","exports","python","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","inside","interpolation","alias","rest","string","function","decorator","punctuation","keyword","builtin","boolean","number","operator","py"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,IAAD,CAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,cADF;AAEPC,MAAAA,UAAU,EAAE;AAFL,KADc;AAKvB,4BAAwB;AACtBD,MAAAA,OAAO,EAAE,qEADa;AAEtBE,MAAAA,MAAM,EAAE,IAFc;AAGtBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACb;AACAJ,UAAAA,OAAO,EAAE,0EAFI;AAGbC,UAAAA,UAAU,EAAE,IAHC;AAIbE,UAAAA,MAAM,EAAE;AACN,2BAAe;AACbH,cAAAA,OAAO,EAAE,oBADI;AAEbC,cAAAA,UAAU,EAAE;AAFC,aADT;AAKN,iCAAqB;AACnBD,cAAAA,OAAO,EAAE,iBADU;AAEnBK,cAAAA,KAAK,EAAE;AAFY,aALf;AASNC,YAAAA,IAAI,EAAE;AATA;AAJK,SADT;AAiBNC,QAAAA,MAAM,EAAE;AAjBF;AAHc,KALD;AA4BvB,4BAAwB;AACtBP,MAAAA,OAAO,EAAE,sCADa;AAEtBE,MAAAA,MAAM,EAAE,IAFc;AAGtBG,MAAAA,KAAK,EAAE;AAHe,KA5BD;AAiCvBE,IAAAA,MAAM,EAAE;AACNP,MAAAA,OAAO,EAAE,kDADH;AAENE,MAAAA,MAAM,EAAE;AAFF,KAjCe;AAqCvBM,IAAAA,QAAQ,EAAE;AACRR,MAAAA,OAAO,EAAE,2CADD;AAERC,MAAAA,UAAU,EAAE;AAFJ,KArCa;AAyCvB,kBAAc;AACZD,MAAAA,OAAO,EAAE,kBADG;AAEZC,MAAAA,UAAU,EAAE;AAFA,KAzCS;AA6CvBQ,IAAAA,SAAS,EAAE;AACTT,MAAAA,OAAO,EAAE,uBADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTI,MAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,aAAf,CAHE;AAITF,MAAAA,MAAM,EAAE;AACNO,QAAAA,WAAW,EAAE;AADP;AAJC,KA7CY;AAqDvBC,IAAAA,OAAO,EAAE,kMArDc;AAsDvBC,IAAAA,OAAO,EAAE,qhBAtDc;AAuDvBC,IAAAA,OAAO,EAAE,yBAvDc;AAwDvBC,IAAAA,MAAM,EAAE,4FAxDe;AAyDvBC,IAAAA,QAAQ,EAAE,mDAzDa;AA0DvBL,IAAAA,WAAW,EAAE;AA1DU,GAAzB;AA4DAb,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuB,sBAAvB,EAA+CS,MAA/C,CACE,eADF,EAEEA,MAFF,CAESG,IAFT,GAEgBT,KAAK,CAACC,SAAN,CAAgBJ,MAFhC;AAGAG,EAAAA,KAAK,CAACC,SAAN,CAAgBkB,EAAhB,GAAqBnB,KAAK,CAACC,SAAN,CAAgBJ,MAArC;AACD","sourcesContent":["'use strict'\r\n\r\nmodule.exports = python\r\npython.displayName = 'python'\r\npython.aliases = ['py']\r\nfunction python(Prism) {\r\n  Prism.languages.python = {\r\n    comment: {\r\n      pattern: /(^|[^\\\\])#.*/,\r\n      lookbehind: true\r\n    },\r\n    'string-interpolation': {\r\n      pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\r\n      greedy: true,\r\n      inside: {\r\n        interpolation: {\r\n          // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\r\n          pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\r\n          lookbehind: true,\r\n          inside: {\r\n            'format-spec': {\r\n              pattern: /(:)[^:(){}]+(?=}$)/,\r\n              lookbehind: true\r\n            },\r\n            'conversion-option': {\r\n              pattern: /![sra](?=[:}]$)/,\r\n              alias: 'punctuation'\r\n            },\r\n            rest: null\r\n          }\r\n        },\r\n        string: /[\\s\\S]+/\r\n      }\r\n    },\r\n    'triple-quoted-string': {\r\n      pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\r\n      greedy: true,\r\n      alias: 'string'\r\n    },\r\n    string: {\r\n      pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\r\n      greedy: true\r\n    },\r\n    function: {\r\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\r\n      lookbehind: true\r\n    },\r\n    'class-name': {\r\n      pattern: /(\\bclass\\s+)\\w+/i,\r\n      lookbehind: true\r\n    },\r\n    decorator: {\r\n      pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\r\n      lookbehind: true,\r\n      alias: ['annotation', 'punctuation'],\r\n      inside: {\r\n        punctuation: /\\./\r\n      }\r\n    },\r\n    keyword: /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\r\n    builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\r\n    boolean: /\\b(?:True|False|None)\\b/,\r\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\r\n    operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\r\n    punctuation: /[{}[\\];(),.:]/\r\n  }\r\n  Prism.languages.python['string-interpolation'].inside[\r\n    'interpolation'\r\n  ].inside.rest = Prism.languages.python\r\n  Prism.languages.py = Prism.languages.python\r\n}\r\n"]},"metadata":{},"sourceType":"script"}