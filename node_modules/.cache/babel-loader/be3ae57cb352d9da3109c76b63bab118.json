{"ast":null,"code":"'use strict';\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\n\nfunction haml(Prism) {\n  /* TODO\r\n  Handle multiline code after tag\r\n  %foo= some |\r\n  multiline |\r\n  code |\r\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n            lookbehind: true,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/refractor/lang/haml.js"],"names":["module","exports","haml","displayName","aliases","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = haml\r\nhaml.displayName = 'haml'\r\nhaml.aliases = []\r\nfunction haml(Prism) {\r\n  /* TODO\r\nHandle multiline code after tag\r\n%foo= some |\r\nmultiline |\r\ncode |\r\n*/\r\n  ;(function(Prism) {\r\n    Prism.languages.haml = {\r\n      // Multiline stuff should appear before the rest\r\n      'multiline-comment': {\r\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\r\n        lookbehind: true,\r\n        alias: 'comment'\r\n      },\r\n      'multiline-code': [\r\n        {\r\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\r\n          lookbehind: true,\r\n          inside: {\r\n            rest: Prism.languages.ruby\r\n          }\r\n        },\r\n        {\r\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\r\n          lookbehind: true,\r\n          inside: {\r\n            rest: Prism.languages.ruby\r\n          }\r\n        }\r\n      ],\r\n      // See at the end of the file for known filters\r\n      filter: {\r\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\r\n        lookbehind: true,\r\n        inside: {\r\n          'filter-name': {\r\n            pattern: /^:[\\w-]+/,\r\n            alias: 'variable'\r\n          }\r\n        }\r\n      },\r\n      markup: {\r\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\r\n        lookbehind: true,\r\n        inside: {\r\n          rest: Prism.languages.markup\r\n        }\r\n      },\r\n      doctype: {\r\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\r\n        lookbehind: true\r\n      },\r\n      tag: {\r\n        // Allows for one nested group of braces\r\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\r\n        lookbehind: true,\r\n        inside: {\r\n          attributes: [\r\n            {\r\n              // Lookbehind tries to prevent interpolations from breaking it all\r\n              // Allows for one nested group of braces\r\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\r\n              lookbehind: true,\r\n              inside: {\r\n                rest: Prism.languages.ruby\r\n              }\r\n            },\r\n            {\r\n              pattern: /\\([^)]+\\)/,\r\n              inside: {\r\n                'attr-value': {\r\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\r\n                  lookbehind: true\r\n                },\r\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\r\n                punctuation: /[=(),]/\r\n              }\r\n            },\r\n            {\r\n              pattern: /\\[[^\\]]+\\]/,\r\n              inside: {\r\n                rest: Prism.languages.ruby\r\n              }\r\n            }\r\n          ],\r\n          punctuation: /[<>]/\r\n        }\r\n      },\r\n      code: {\r\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\r\n        lookbehind: true,\r\n        inside: {\r\n          rest: Prism.languages.ruby\r\n        }\r\n      },\r\n      // Interpolations in plain text\r\n      interpolation: {\r\n        pattern: /#\\{[^}]+\\}/,\r\n        inside: {\r\n          delimiter: {\r\n            pattern: /^#\\{|\\}$/,\r\n            alias: 'punctuation'\r\n          },\r\n          rest: Prism.languages.ruby\r\n        }\r\n      },\r\n      punctuation: {\r\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\r\n        lookbehind: true\r\n      }\r\n    }\r\n    var filter_pattern =\r\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\r\n    var filters = [\r\n      'css',\r\n      {\r\n        filter: 'coffee',\r\n        language: 'coffeescript'\r\n      },\r\n      'erb',\r\n      'javascript',\r\n      'less',\r\n      'markdown',\r\n      'ruby',\r\n      'scss',\r\n      'textile'\r\n    ]\r\n    var all_filters = {}\r\n    for (var i = 0, l = filters.length; i < l; i++) {\r\n      var filter = filters[i]\r\n      filter =\r\n        typeof filter === 'string'\r\n          ? {\r\n              filter: filter,\r\n              language: filter\r\n            }\r\n          : filter\r\n      if (Prism.languages[filter.language]) {\r\n        all_filters['filter-' + filter.filter] = {\r\n          pattern: RegExp(\r\n            filter_pattern.replace('{{filter_name}}', filter.filter)\r\n          ),\r\n          lookbehind: true,\r\n          inside: {\r\n            'filter-name': {\r\n              pattern: /^:[\\w-]+/,\r\n              alias: 'variable'\r\n            },\r\n            rest: Prism.languages[filter.language]\r\n          }\r\n        }\r\n      }\r\n    }\r\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}