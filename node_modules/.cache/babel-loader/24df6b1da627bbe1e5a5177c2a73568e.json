{"ast":null,"code":"'use strict';\n\nmodule.exports = roboconf;\nroboconf.displayName = 'roboconf';\nroboconf.aliases = [];\n\nfunction roboconf(Prism) {\n  Prism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n      pattern: /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\n      lookbehind: true\n    },\n    component: {\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n      alias: 'variable'\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n      pattern: /(=[ \\t]*)[^,;]+/,\n      lookbehind: true,\n      alias: 'attr-value'\n    },\n    optional: {\n      pattern: /\\(optional\\)/,\n      alias: 'builtin'\n    },\n    wildcard: {\n      pattern: /(\\.)\\*/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    punctuation: /[{},.;:=]/\n  };\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/lyncovid19-frontend-vercel/node_modules/refractor/lang/roboconf.js"],"names":["module","exports","roboconf","displayName","aliases","Prism","languages","comment","keyword","pattern","lookbehind","component","alias","property","value","optional","wildcard","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,EAAnB;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;AACvBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,QAAhB,GAA2B;AACzBK,IAAAA,OAAO,EAAE,KADgB;AAEzBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,+EADF;AAEPC,MAAAA,UAAU,EAAE;AAFL,KAFgB;AAMzBC,IAAAA,SAAS,EAAE;AACTF,MAAAA,OAAO,EAAE,oBADA;AAETG,MAAAA,KAAK,EAAE;AAFE,KANc;AAUzBC,IAAAA,QAAQ,EAAE,oBAVe;AAWzBC,IAAAA,KAAK,EAAE;AACLL,MAAAA,OAAO,EAAE,iBADJ;AAELC,MAAAA,UAAU,EAAE,IAFP;AAGLE,MAAAA,KAAK,EAAE;AAHF,KAXkB;AAgBzBG,IAAAA,QAAQ,EAAE;AACRN,MAAAA,OAAO,EAAE,cADD;AAERG,MAAAA,KAAK,EAAE;AAFC,KAhBe;AAoBzBI,IAAAA,QAAQ,EAAE;AACRP,MAAAA,OAAO,EAAE,QADD;AAERC,MAAAA,UAAU,EAAE,IAFJ;AAGRE,MAAAA,KAAK,EAAE;AAHC,KApBe;AAyBzBK,IAAAA,WAAW,EAAE;AAzBY,GAA3B;AA2BD","sourcesContent":["'use strict'\r\n\r\nmodule.exports = roboconf\r\nroboconf.displayName = 'roboconf'\r\nroboconf.aliases = []\r\nfunction roboconf(Prism) {\r\n  Prism.languages.roboconf = {\r\n    comment: /#.*/,\r\n    keyword: {\r\n      pattern: /(^|\\s)(?:(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{)|(?:external|import)\\b)/,\r\n      lookbehind: true\r\n    },\r\n    component: {\r\n      pattern: /[\\w-]+(?=[ \\t]*\\{)/,\r\n      alias: 'variable'\r\n    },\r\n    property: /[\\w.-]+(?=[ \\t]*:)/,\r\n    value: {\r\n      pattern: /(=[ \\t]*)[^,;]+/,\r\n      lookbehind: true,\r\n      alias: 'attr-value'\r\n    },\r\n    optional: {\r\n      pattern: /\\(optional\\)/,\r\n      alias: 'builtin'\r\n    },\r\n    wildcard: {\r\n      pattern: /(\\.)\\*/,\r\n      lookbehind: true,\r\n      alias: 'operator'\r\n    },\r\n    punctuation: /[{},.;:=]/\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}