{"ast":null,"code":"'use strict';\n\nmodule.exports = parser;\nparser.displayName = 'parser';\nparser.aliases = [];\n\nfunction parser(Prism) {\n  ;\n\n  (function (Prism) {\n    var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    });\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:true|false)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    });\n    parser = Prism.languages.insertBefore('inside', 'punctuation', {\n      expression: parser.expression,\n      keyword: parser.keyword,\n      variable: parser.variable,\n      function: parser.function,\n      escape: parser.escape,\n      'parser-punctuation': {\n        pattern: parser.punctuation,\n        alias: 'punctuation'\n      }\n    }, parser['tag'].inside['attr-value']);\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/refractor/lang/parser.js"],"names":["module","exports","parser","displayName","aliases","Prism","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = parser\r\nparser.displayName = 'parser'\r\nparser.aliases = []\r\nfunction parser(Prism) {\r\n  ;(function(Prism) {\r\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\r\n      keyword: {\r\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\r\n        lookbehind: true\r\n      },\r\n      variable: {\r\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      function: {\r\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\r\n        lookbehind: true,\r\n        inside: {\r\n          keyword: {\r\n            pattern: /(^@)(?:GET_|SET_)/,\r\n            lookbehind: true\r\n          },\r\n          punctuation: /\\.|:+/\r\n        }\r\n      },\r\n      escape: {\r\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\r\n        alias: 'builtin'\r\n      },\r\n      punctuation: /[\\[\\](){};]/\r\n    }))\r\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\r\n      'parser-comment': {\r\n        pattern: /(\\s)#.*/,\r\n        lookbehind: true,\r\n        alias: 'comment'\r\n      },\r\n      expression: {\r\n        // Allow for 3 levels of depth\r\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\r\n        greedy: true,\r\n        lookbehind: true,\r\n        inside: {\r\n          string: {\r\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\r\n            lookbehind: true\r\n          },\r\n          keyword: parser.keyword,\r\n          variable: parser.variable,\r\n          function: parser.function,\r\n          boolean: /\\b(?:true|false)\\b/,\r\n          number: /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\r\n          escape: parser.escape,\r\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\r\n          punctuation: parser.punctuation\r\n        }\r\n      }\r\n    })\r\n    parser = Prism.languages.insertBefore(\r\n      'inside',\r\n      'punctuation',\r\n      {\r\n        expression: parser.expression,\r\n        keyword: parser.keyword,\r\n        variable: parser.variable,\r\n        function: parser.function,\r\n        escape: parser.escape,\r\n        'parser-punctuation': {\r\n          pattern: parser.punctuation,\r\n          alias: 'punctuation'\r\n        }\r\n      },\r\n      parser['tag'].inside['attr-value']\r\n    )\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}