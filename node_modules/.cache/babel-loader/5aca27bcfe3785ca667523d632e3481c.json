{"ast":null,"code":"'use strict';\n\nmodule.exports = regex;\nregex.displayName = 'regex';\nregex.aliases = [];\n\nfunction regex(Prism) {\n  ;\n\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i;\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    var backreference = [/\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n    {\n      pattern: /\\\\k<[^<>']+>/,\n      inside: {\n        'group-name': groupName\n      }\n    }];\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        inside: {\n          'group-name': groupName\n        }\n      }, /\\)/],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    };\n    ['actionscript', 'coffescript', 'flow', 'javascript', 'typescript', 'vala'].forEach(function (lang) {\n      var grammar = Prism.languages[lang];\n\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        };\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/refractor/lang/regex.js"],"names":["module","exports","regex","displayName","aliases","Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","range","RegExp","groupName","lookbehind","backreference","inside","languages","charset","charclass","anchor","group","quantifier","alternation","forEach","lang","grammar"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpB;;AAAC,GAAC,UAASA,KAAT,EAAgB;AAChB,QAAIC,aAAa,GAAG;AAClBC,MAAAA,OAAO,EAAE,sBADS;AAElBC,MAAAA,KAAK,EAAE;AAFW,KAApB;AAIA,QAAIC,MAAM,GAAG,4FAAb;AACA,QAAIC,SAAS,GAAG,yBAAhB;AACA,QAAIC,SAAS,GAAG,iBAAiBF,MAAM,CAACG,MAAxB,GAAiC,GAAjD;AACA,QAAIC,KAAK,GAAGC,MAAM,CAACH,SAAS,GAAG,GAAZ,GAAkBA,SAAnB,CAAlB,CARgB,CAQgC;;AAChD,QAAII,SAAS,GAAG;AACdR,MAAAA,OAAO,EAAE,uBADK;AAEdS,MAAAA,UAAU,EAAE,IAFE;AAGdR,MAAAA,KAAK,EAAE;AAHO,KAAhB;AAKA,QAAIS,aAAa,GAAG,CAClB,0BADkB,EACU;AAC5B;AACEV,MAAAA,OAAO,EAAE,cADX;AAEEW,MAAAA,MAAM,EAAE;AACN,sBAAcH;AADR;AAFV,KAFkB,CAApB;AASAV,IAAAA,KAAK,CAACc,SAAN,CAAgBjB,KAAhB,GAAwB;AACtBkB,MAAAA,OAAO,EAAE;AACPb,QAAAA,OAAO,EAAE,iDADF;AAEPS,QAAAA,UAAU,EAAE,IAFL;AAGPE,QAAAA,MAAM,EAAE;AACN,8BAAoB;AAClBX,YAAAA,OAAO,EAAE,SADS;AAElBS,YAAAA,UAAU,EAAE;AAFM,WADd;AAKN,iCAAuB,SALjB;AAMNH,UAAAA,KAAK,EAAE;AACLN,YAAAA,OAAO,EAAEM,KADJ;AAELK,YAAAA,MAAM,EAAE;AACNT,cAAAA,MAAM,EAAEA,MADF;AAEN,mCAAqB;AAFf;AAFH,WAND;AAaN,4BAAkBH,aAbZ;AAcNe,UAAAA,SAAS,EAAEX,SAdL;AAeNO,UAAAA,aAAa,EAAEA,aAfT;AAgBNR,UAAAA,MAAM,EAAEA;AAhBF;AAHD,OADa;AAuBtB,wBAAkBH,aAvBI;AAwBtBe,MAAAA,SAAS,EAAEX,SAxBW;AAyBtBO,MAAAA,aAAa,EAAEA,aAzBO;AA0BtBK,MAAAA,MAAM,EAAE,iBA1Bc;AA2BtBb,MAAAA,MAAM,EAAEA,MA3Bc;AA4BtBc,MAAAA,KAAK,EAAE,CACL;AACE;AACA;AACA;AACAhB,QAAAA,OAAO,EAAE,6EAJX;AAKEW,QAAAA,MAAM,EAAE;AACN,wBAAcH;AADR;AALV,OADK,EAUL,IAVK,CA5Be;AAwCtBS,MAAAA,UAAU,EAAE,wBAxCU;AAyCtBC,MAAAA,WAAW,EAAE;AAzCS,KAAxB;AA2CC,KACC,cADD,EAEC,aAFD,EAGC,MAHD,EAIC,YAJD,EAKC,YALD,EAMC,MAND,EAOCC,OAPD,CAOS,UAASC,IAAT,EAAe;AACvB,UAAIC,OAAO,GAAGvB,KAAK,CAACc,SAAN,CAAgBQ,IAAhB,CAAd;;AACA,UAAIC,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBV,MAAjB,GAA0B;AACxB,yBAAe,SADS;AAExB,6BAAmB,SAFK;AAGxB,4BAAkB;AAChBX,YAAAA,OAAO,EAAE,SADO;AAEhBW,YAAAA,MAAM,EAAEb,KAAK,CAACc,SAAN,CAAgBjB;AAFR;AAHM,SAA1B;AAQD;AACF,KAnBA;AAoBF,GAtFA,EAsFEG,KAtFF;AAuFF","sourcesContent":["'use strict'\r\n\r\nmodule.exports = regex\r\nregex.displayName = 'regex'\r\nregex.aliases = []\r\nfunction regex(Prism) {\r\n  ;(function(Prism) {\r\n    var specialEscape = {\r\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\r\n      alias: 'escape'\r\n    }\r\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\r\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i\r\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\r\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\r\n    var groupName = {\r\n      pattern: /(<|')[^<>']+(?=[>']$)/,\r\n      lookbehind: true,\r\n      alias: 'variable'\r\n    }\r\n    var backreference = [\r\n      /\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\r\n      {\r\n        pattern: /\\\\k<[^<>']+>/,\r\n        inside: {\r\n          'group-name': groupName\r\n        }\r\n      }\r\n    ]\r\n    Prism.languages.regex = {\r\n      charset: {\r\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\r\n        lookbehind: true,\r\n        inside: {\r\n          'charset-negation': {\r\n            pattern: /(^\\[)\\^/,\r\n            lookbehind: true\r\n          },\r\n          'charset-punctuation': /^\\[|\\]$/,\r\n          range: {\r\n            pattern: range,\r\n            inside: {\r\n              escape: escape,\r\n              'range-punctuation': /-/\r\n            }\r\n          },\r\n          'special-escape': specialEscape,\r\n          charclass: charClass,\r\n          backreference: backreference,\r\n          escape: escape\r\n        }\r\n      },\r\n      'special-escape': specialEscape,\r\n      charclass: charClass,\r\n      backreference: backreference,\r\n      anchor: /[$^]|\\\\[ABbGZz]/,\r\n      escape: escape,\r\n      group: [\r\n        {\r\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\r\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\r\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\r\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\r\n          inside: {\r\n            'group-name': groupName\r\n          }\r\n        },\r\n        /\\)/\r\n      ],\r\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\r\n      alternation: /\\|/\r\n    }\r\n    ;[\r\n      'actionscript',\r\n      'coffescript',\r\n      'flow',\r\n      'javascript',\r\n      'typescript',\r\n      'vala'\r\n    ].forEach(function(lang) {\r\n      var grammar = Prism.languages[lang]\r\n      if (grammar) {\r\n        grammar['regex'].inside = {\r\n          'regex-flags': /[a-z]+$/,\r\n          'regex-delimiter': /^\\/|\\/$/,\r\n          'language-regex': {\r\n            pattern: /[\\s\\S]+/,\r\n            inside: Prism.languages.regex\r\n          }\r\n        }\r\n      }\r\n    })\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}