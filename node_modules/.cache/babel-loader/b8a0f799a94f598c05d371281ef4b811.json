{"ast":null,"code":"'use strict';\n\nvar high = require('highlight.js/lib/highlight.js');\n\nvar fault = require('fault'); // The lowlight interface, which has to be compatible with highlight.js, as\n// this object is passed to highlight.js syntaxes.\n\n\nfunction High() {}\n\nHigh.prototype = high; // Expose.\n\nvar low = new High(); // Ha!\n\nmodule.exports = low;\nlow.highlight = highlight;\nlow.highlightAuto = autoHighlight;\nlow.registerLanguage = registerLanguage;\nlow.listLanguages = listLanguages;\nlow.registerAlias = registerAlias;\nlow.getLanguage = getLanguage;\nvar inherit = high.inherit;\nvar own = {}.hasOwnProperty;\nvar concat = [].concat;\nvar defaultPrefix = 'hljs-';\nvar keyInsensitive = 'case_insensitive';\nvar keyCachedVariants = 'cached_variants';\nvar space = ' ';\nvar verticalBar = '|'; // Maps of syntaxes.\n\nvar languageNames = [];\nvar languages = {};\nvar aliases = {}; // Highlighting with language detection.\n// Accepts a string with the code to highlight.\n// Returns an object with the following properties:\n//\n// *   `language` — Detected language\n// *   `relevance` — Integer\n// *   `value` — HAST tree with highlighting markup\n// *   `secondBest` — Object with the same structure for second-best\n//     heuristically detected language, may be absent.\n\nfunction autoHighlight(value, options) {\n  var settings = options || {};\n  var subset = settings.subset || languageNames;\n  var prefix = settings.prefix;\n  var length = subset.length;\n  var index = -1;\n  var result;\n  var secondBest;\n  var current;\n  var name;\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  secondBest = normalize({});\n  result = normalize({});\n\n  while (++index < length) {\n    name = subset[index];\n\n    if (!getLanguage(name)) {\n      continue;\n    }\n\n    current = normalize(coreHighlight(name, value, false, prefix));\n    current.language = name;\n\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current;\n    }\n\n    if (current.relevance > result.relevance) {\n      secondBest = result;\n      result = current;\n    }\n  }\n\n  if (secondBest.language) {\n    result.secondBest = secondBest;\n  }\n\n  return result;\n} // Highlighting `value` in the language `language`.\n\n\nfunction highlight(language, value, options) {\n  var settings = options || {};\n  var prefix = settings.prefix;\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  return normalize(coreHighlight(language, value, true, prefix));\n} // Register a language.\n\n\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low);\n  languages[name] = lang;\n  languageNames.push(name);\n\n  if (lang.aliases) {\n    registerAlias(name, lang.aliases);\n  }\n} // Get a list of all registered languages.\n\n\nfunction listLanguages() {\n  return languageNames.concat();\n} // Register more aliases for an already registered language.\n\n\nfunction registerAlias(name, alias) {\n  var map = name;\n  var key;\n  var list;\n  var length;\n  var index;\n\n  if (alias) {\n    map = {};\n    map[name] = alias;\n  }\n\n  for (key in map) {\n    list = map[key];\n    list = typeof list === 'string' ? [list] : list;\n    length = list.length;\n    index = -1;\n\n    while (++index < length) {\n      aliases[list[index]] = key;\n    }\n  }\n} // Core highlighting function.\n// Accepts a language name, or an alias, and a string with the code to\n// highlight.\n// eslint-disable-next-line max-params\n\n\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {};\n  var stack = [];\n  var modeBuffer = '';\n  var relevance = 0;\n  var language;\n  var top;\n  var current;\n  var currentChildren;\n  var offset;\n  var count;\n  var match;\n  var children;\n\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name);\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  language = getLanguage(name);\n  top = continuation || language;\n  children = [];\n  current = top;\n  currentChildren = children;\n\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name);\n  }\n\n  compileLanguage(language);\n\n  try {\n    top.terminators.lastIndex = 0;\n    offset = 0;\n    match = top.terminators.exec(value);\n\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0]);\n      offset = match.index + count;\n      top.terminators.lastIndex = offset;\n      match = top.terminators.exec(value);\n    }\n\n    processLexeme(value.substr(offset));\n    current = top;\n\n    while (current.parent) {\n      if (current.className) {\n        pop();\n      }\n\n      current = current.parent;\n    }\n\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    };\n  } catch (error) {\n    /* istanbul ignore if - Catch-all  */\n    if (error.message.indexOf('Illegal') === -1) {\n      throw error;\n    }\n\n    return {\n      relevance: 0,\n      value: addText(value, [])\n    };\n  } // Process a lexeme.  Returns next position.\n\n\n  function processLexeme(buffer, lexeme) {\n    var newMode;\n    var endMode;\n    var origin;\n    modeBuffer += buffer;\n\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren);\n      return 0;\n    }\n\n    newMode = subMode(lexeme, top);\n\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren);\n      startNewMode(newMode, lexeme);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    endMode = endOfMode(top, lexeme);\n\n    if (endMode) {\n      origin = top;\n\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme;\n      }\n\n      addSiblings(processBuffer(), currentChildren); // Close open modes.\n\n      do {\n        if (top.className) {\n          pop();\n        }\n\n        relevance += top.relevance;\n        top = top.parent;\n      } while (top !== endMode.parent);\n\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren);\n      }\n\n      modeBuffer = '';\n\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '');\n      }\n\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    if (isIllegal(lexeme, top)) {\n      throw fault('Illegal lexeme \"%s\" for mode \"%s\"', lexeme, top.className || '<unnamed>');\n    } // Parser should not reach this point as all types of lexemes should be\n    // caught earlier, but if it does due to some bug make sure it advances\n    // at least one character forward to prevent infinite looping.\n\n\n    modeBuffer += lexeme;\n    return lexeme.length ||\n    /* istanbul ignore next */\n    1;\n  } // Start a new mode with a `lexeme` to process.\n\n\n  function startNewMode(mode, lexeme) {\n    var node;\n\n    if (mode.className) {\n      node = build(mode.className, []);\n    }\n\n    if (mode.returnBegin) {\n      modeBuffer = '';\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren);\n      modeBuffer = '';\n    } else {\n      modeBuffer = lexeme;\n    } // Enter a new mode.\n\n\n    if (node) {\n      currentChildren.push(node);\n      stack.push(currentChildren);\n      currentChildren = node.children;\n    }\n\n    top = Object.create(mode, {\n      parent: {\n        value: top\n      }\n    });\n  } // Process the buffer.\n\n\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords();\n    modeBuffer = '';\n    return result;\n  } // Process a sublanguage (returns a list of nodes).\n\n\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string';\n    var subvalue;\n    /* istanbul ignore if - support non-loaded sublanguages */\n\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, []);\n    }\n\n    if (explicit) {\n      subvalue = coreHighlight(top.subLanguage, modeBuffer, true, prefix, continuations[top.subLanguage]);\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\n        prefix: prefix\n      });\n    } // If we couldn’t highlight, for example because the requests subset isn’t\n    // loaded, return a text node.\n\n\n    if (!subvalue.language) {\n      return [buildText(modeBuffer)];\n    } // Counting embedded language score towards the host language may be\n    // disabled with zeroing the containing mode relevance.\n    // Usecase in point is Markdown that allows XML everywhere and makes every\n    // XML snippet to have a much larger Markdown score.\n\n\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance;\n    }\n\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top;\n    }\n\n    return [build(subvalue.language, subvalue.value, true)];\n  } // Process keywords. Returns nodes.\n\n\n  function processKeywords() {\n    var nodes = [];\n    var lastIndex;\n    var keyword;\n    var node;\n    var submatch;\n\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes);\n    }\n\n    lastIndex = 0;\n    top.lexemesRe.lastIndex = 0;\n    keyword = top.lexemesRe.exec(modeBuffer);\n\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes);\n      submatch = keywordMatch(top, keyword);\n\n      if (submatch) {\n        relevance += submatch[1];\n        node = build(submatch[0], []);\n        nodes.push(node);\n        addText(keyword[0], node.children);\n      } else {\n        addText(keyword[0], nodes);\n      }\n\n      lastIndex = top.lexemesRe.lastIndex;\n      keyword = top.lexemesRe.exec(modeBuffer);\n    }\n\n    addText(modeBuffer.substr(lastIndex), nodes);\n    return nodes;\n  } // Add siblings.\n\n\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length;\n    var index = -1;\n    var sibling;\n\n    while (++index < length) {\n      sibling = siblings[index];\n\n      if (sibling.type === 'text') {\n        addText(sibling.value, nodes);\n      } else {\n        nodes.push(sibling);\n      }\n    }\n  } // Add a text.\n\n\n  function addText(value, nodes) {\n    var tail;\n\n    if (value) {\n      tail = nodes[nodes.length - 1];\n\n      if (tail && tail.type === 'text') {\n        tail.value += value;\n      } else {\n        nodes.push(buildText(value));\n      }\n    }\n\n    return nodes;\n  } // Build a text.\n\n\n  function buildText(value) {\n    return {\n      type: 'text',\n      value: value\n    };\n  } // Build a span.\n\n\n  function build(name, contents, noPrefix) {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    };\n  } // Check if the first word in `keywords` is a keyword.\n\n\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0];\n\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase();\n    }\n\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword];\n  } // Check if `lexeme` is illegal according to `mode`.\n\n\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme);\n  } // Check if `lexeme` ends `mode`.\n\n\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent;\n      }\n\n      return mode;\n    }\n\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme);\n    }\n  } // Check a sub-mode.\n\n\n  function subMode(lexeme, mode) {\n    var values = mode.contains;\n    var length = values.length;\n    var index = -1;\n\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index];\n      }\n    }\n  } // Exit the current context.\n\n\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children;\n  }\n}\n\nfunction expandMode(mode) {\n  var length;\n  var index;\n  var variants;\n  var result;\n\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants;\n    length = variants.length;\n    index = -1;\n    result = [];\n\n    while (++index < length) {\n      result[index] = inherit(mode, {\n        variants: null\n      }, variants[index]);\n    }\n\n    mode[keyCachedVariants] = result;\n  }\n\n  return mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode]);\n} // Compile a language.\n\n\nfunction compileLanguage(language) {\n  compileMode(language); // Compile a language mode, optionally with a parent.\n  // eslint-disable-next-line complexity\n\n  function compileMode(mode, parent) {\n    var compiledKeywords = {};\n    var terminators;\n\n    if (mode.compiled) {\n      return;\n    }\n\n    mode.compiled = true;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords);\n      } else {\n        Object.keys(mode.keywords).forEach(function (className) {\n          flatten(className, mode.keywords[className]);\n        });\n      }\n\n      mode.keywords = compiledKeywords;\n    }\n\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin = '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b';\n      }\n\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/;\n      }\n\n      mode.beginRe = langRe(mode.begin);\n\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/;\n      }\n\n      if (mode.end) {\n        mode.endRe = langRe(mode.end);\n      }\n\n      mode.terminatorEnd = source(mode.end) || '';\n\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd += (mode.end ? verticalBar : '') + parent.terminatorEnd;\n      }\n    }\n\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal);\n    }\n\n    if (mode.relevance === undefined) {\n      mode.relevance = 1;\n    }\n\n    if (!mode.contains) {\n      mode.contains = [];\n    }\n\n    mode.contains = concat.apply([], mode.contains.map(function (c) {\n      return expandMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function (c) {\n      compileMode(c, mode);\n    });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    terminators = mode.contains.map(map).concat([mode.terminatorEnd, mode.illegal]).map(source).filter(Boolean);\n    mode.terminators = terminators.length === 0 ? {\n      exec: execNoop\n    } : langRe(terminators.join(verticalBar), true);\n\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n    } // Flatten a classname.\n\n\n    function flatten(className, value) {\n      var pairs;\n      var pair;\n      var index;\n      var length;\n\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase();\n      }\n\n      pairs = value.split(space);\n      length = pairs.length;\n      index = -1;\n\n      while (++index < length) {\n        pair = pairs[index].split(verticalBar);\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n      }\n    }\n  } // Create a regex for `value`.\n\n\n  function langRe(value, global) {\n    return new RegExp(source(value), 'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : ''));\n  } // Get the source of an expression or string.\n\n\n  function source(re) {\n    return re && re.source || re;\n  }\n} // Normalize a syntax result.\n\n\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  };\n} // Check if `expression` matches `lexeme`.\n\n\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme);\n  return match && match.index === 0;\n} // No-op exec.\n\n\nfunction execNoop() {\n  return null;\n} // Get a language by `name`.\n\n\nfunction getLanguage(name) {\n  name = name.toLowerCase();\n  return languages[name] || languages[aliases[name]];\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/lowlight/lib/core.js"],"names":["high","require","fault","High","prototype","low","module","exports","highlight","highlightAuto","autoHighlight","registerLanguage","listLanguages","registerAlias","getLanguage","inherit","own","hasOwnProperty","concat","defaultPrefix","keyInsensitive","keyCachedVariants","space","verticalBar","languageNames","languages","aliases","value","options","settings","subset","prefix","length","index","result","secondBest","current","name","undefined","normalize","coreHighlight","language","relevance","syntax","lang","push","alias","map","key","list","ignore","continuation","continuations","stack","modeBuffer","top","currentChildren","offset","count","match","children","compileLanguage","terminators","lastIndex","exec","processLexeme","substring","substr","parent","className","pop","error","message","indexOf","addText","buffer","lexeme","newMode","endMode","origin","addSiblings","processBuffer","subMode","startNewMode","returnBegin","endOfMode","returnEnd","excludeEnd","starts","isIllegal","mode","node","build","excludeBegin","Object","create","subLanguage","processSubLanguage","processKeywords","explicit","subvalue","buildText","nodes","keyword","submatch","keywords","lexemesRe","keywordMatch","siblings","sibling","type","tail","contents","noPrefix","tagName","properties","toLowerCase","call","test","illegalRe","endRe","endsParent","endsWithParent","values","contains","beginRe","expandMode","variants","compileMode","compiledKeywords","compiled","beginKeywords","flatten","keys","forEach","langRe","lexemes","begin","split","join","end","terminatorEnd","source","illegal","apply","c","filter","Boolean","execNoop","pairs","pair","Number","global","RegExp","re","expression"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nvar high = require('highlight.js/lib/highlight.js')\r\nvar fault = require('fault')\r\n\r\n// The lowlight interface, which has to be compatible with highlight.js, as\r\n// this object is passed to highlight.js syntaxes.\r\n\r\nfunction High() {}\r\n\r\nHigh.prototype = high\r\n\r\n// Expose.\r\nvar low = new High() // Ha!\r\n\r\nmodule.exports = low\r\n\r\nlow.highlight = highlight\r\nlow.highlightAuto = autoHighlight\r\nlow.registerLanguage = registerLanguage\r\nlow.listLanguages = listLanguages\r\nlow.registerAlias = registerAlias\r\nlow.getLanguage = getLanguage\r\n\r\nvar inherit = high.inherit\r\nvar own = {}.hasOwnProperty\r\nvar concat = [].concat\r\n\r\nvar defaultPrefix = 'hljs-'\r\nvar keyInsensitive = 'case_insensitive'\r\nvar keyCachedVariants = 'cached_variants'\r\nvar space = ' '\r\nvar verticalBar = '|'\r\n\r\n// Maps of syntaxes.\r\nvar languageNames = []\r\nvar languages = {}\r\nvar aliases = {}\r\n\r\n// Highlighting with language detection.\r\n// Accepts a string with the code to highlight.\r\n// Returns an object with the following properties:\r\n//\r\n// *   `language` — Detected language\r\n// *   `relevance` — Integer\r\n// *   `value` — HAST tree with highlighting markup\r\n// *   `secondBest` — Object with the same structure for second-best\r\n//     heuristically detected language, may be absent.\r\nfunction autoHighlight(value, options) {\r\n  var settings = options || {}\r\n  var subset = settings.subset || languageNames\r\n  var prefix = settings.prefix\r\n  var length = subset.length\r\n  var index = -1\r\n  var result\r\n  var secondBest\r\n  var current\r\n  var name\r\n\r\n  if (prefix === null || prefix === undefined) {\r\n    prefix = defaultPrefix\r\n  }\r\n\r\n  if (typeof value !== 'string') {\r\n    throw fault('Expected `string` for value, got `%s`', value)\r\n  }\r\n\r\n  secondBest = normalize({})\r\n  result = normalize({})\r\n\r\n  while (++index < length) {\r\n    name = subset[index]\r\n\r\n    if (!getLanguage(name)) {\r\n      continue\r\n    }\r\n\r\n    current = normalize(coreHighlight(name, value, false, prefix))\r\n\r\n    current.language = name\r\n\r\n    if (current.relevance > secondBest.relevance) {\r\n      secondBest = current\r\n    }\r\n\r\n    if (current.relevance > result.relevance) {\r\n      secondBest = result\r\n      result = current\r\n    }\r\n  }\r\n\r\n  if (secondBest.language) {\r\n    result.secondBest = secondBest\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// Highlighting `value` in the language `language`.\r\nfunction highlight(language, value, options) {\r\n  var settings = options || {}\r\n  var prefix = settings.prefix\r\n\r\n  if (prefix === null || prefix === undefined) {\r\n    prefix = defaultPrefix\r\n  }\r\n\r\n  return normalize(coreHighlight(language, value, true, prefix))\r\n}\r\n\r\n// Register a language.\r\nfunction registerLanguage(name, syntax) {\r\n  var lang = syntax(low)\r\n\r\n  languages[name] = lang\r\n\r\n  languageNames.push(name)\r\n\r\n  if (lang.aliases) {\r\n    registerAlias(name, lang.aliases)\r\n  }\r\n}\r\n\r\n// Get a list of all registered languages.\r\nfunction listLanguages() {\r\n  return languageNames.concat()\r\n}\r\n\r\n// Register more aliases for an already registered language.\r\nfunction registerAlias(name, alias) {\r\n  var map = name\r\n  var key\r\n  var list\r\n  var length\r\n  var index\r\n\r\n  if (alias) {\r\n    map = {}\r\n    map[name] = alias\r\n  }\r\n\r\n  for (key in map) {\r\n    list = map[key]\r\n    list = typeof list === 'string' ? [list] : list\r\n    length = list.length\r\n    index = -1\r\n\r\n    while (++index < length) {\r\n      aliases[list[index]] = key\r\n    }\r\n  }\r\n}\r\n\r\n// Core highlighting function.\r\n// Accepts a language name, or an alias, and a string with the code to\r\n// highlight.\r\n// eslint-disable-next-line max-params\r\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\r\n  var continuations = {}\r\n  var stack = []\r\n  var modeBuffer = ''\r\n  var relevance = 0\r\n  var language\r\n  var top\r\n  var current\r\n  var currentChildren\r\n  var offset\r\n  var count\r\n  var match\r\n  var children\r\n\r\n  if (typeof name !== 'string') {\r\n    throw fault('Expected `string` for name, got `%s`', name)\r\n  }\r\n\r\n  if (typeof value !== 'string') {\r\n    throw fault('Expected `string` for value, got `%s`', value)\r\n  }\r\n\r\n  language = getLanguage(name)\r\n  top = continuation || language\r\n  children = []\r\n\r\n  current = top\r\n  currentChildren = children\r\n\r\n  if (!language) {\r\n    throw fault('Unknown language: `%s` is not registered', name)\r\n  }\r\n\r\n  compileLanguage(language)\r\n\r\n  try {\r\n    top.terminators.lastIndex = 0\r\n    offset = 0\r\n    match = top.terminators.exec(value)\r\n\r\n    while (match) {\r\n      count = processLexeme(value.substring(offset, match.index), match[0])\r\n      offset = match.index + count\r\n      top.terminators.lastIndex = offset\r\n      match = top.terminators.exec(value)\r\n    }\r\n\r\n    processLexeme(value.substr(offset))\r\n    current = top\r\n\r\n    while (current.parent) {\r\n      if (current.className) {\r\n        pop()\r\n      }\r\n\r\n      current = current.parent\r\n    }\r\n\r\n    return {\r\n      relevance: relevance,\r\n      value: currentChildren,\r\n      language: name,\r\n      top: top\r\n    }\r\n  } catch (error) {\r\n    /* istanbul ignore if - Catch-all  */\r\n    if (error.message.indexOf('Illegal') === -1) {\r\n      throw error\r\n    }\r\n\r\n    return {relevance: 0, value: addText(value, [])}\r\n  }\r\n\r\n  // Process a lexeme.  Returns next position.\r\n  function processLexeme(buffer, lexeme) {\r\n    var newMode\r\n    var endMode\r\n    var origin\r\n\r\n    modeBuffer += buffer\r\n\r\n    if (lexeme === undefined) {\r\n      addSiblings(processBuffer(), currentChildren)\r\n\r\n      return 0\r\n    }\r\n\r\n    newMode = subMode(lexeme, top)\r\n\r\n    if (newMode) {\r\n      addSiblings(processBuffer(), currentChildren)\r\n\r\n      startNewMode(newMode, lexeme)\r\n\r\n      return newMode.returnBegin ? 0 : lexeme.length\r\n    }\r\n\r\n    endMode = endOfMode(top, lexeme)\r\n\r\n    if (endMode) {\r\n      origin = top\r\n\r\n      if (!(origin.returnEnd || origin.excludeEnd)) {\r\n        modeBuffer += lexeme\r\n      }\r\n\r\n      addSiblings(processBuffer(), currentChildren)\r\n\r\n      // Close open modes.\r\n      do {\r\n        if (top.className) {\r\n          pop()\r\n        }\r\n\r\n        relevance += top.relevance\r\n        top = top.parent\r\n      } while (top !== endMode.parent)\r\n\r\n      if (origin.excludeEnd) {\r\n        addText(lexeme, currentChildren)\r\n      }\r\n\r\n      modeBuffer = ''\r\n\r\n      if (endMode.starts) {\r\n        startNewMode(endMode.starts, '')\r\n      }\r\n\r\n      return origin.returnEnd ? 0 : lexeme.length\r\n    }\r\n\r\n    if (isIllegal(lexeme, top)) {\r\n      throw fault(\r\n        'Illegal lexeme \"%s\" for mode \"%s\"',\r\n        lexeme,\r\n        top.className || '<unnamed>'\r\n      )\r\n    }\r\n\r\n    // Parser should not reach this point as all types of lexemes should be\r\n    // caught earlier, but if it does due to some bug make sure it advances\r\n    // at least one character forward to prevent infinite looping.\r\n    modeBuffer += lexeme\r\n\r\n    return lexeme.length || /* istanbul ignore next */ 1\r\n  }\r\n\r\n  // Start a new mode with a `lexeme` to process.\r\n  function startNewMode(mode, lexeme) {\r\n    var node\r\n\r\n    if (mode.className) {\r\n      node = build(mode.className, [])\r\n    }\r\n\r\n    if (mode.returnBegin) {\r\n      modeBuffer = ''\r\n    } else if (mode.excludeBegin) {\r\n      addText(lexeme, currentChildren)\r\n\r\n      modeBuffer = ''\r\n    } else {\r\n      modeBuffer = lexeme\r\n    }\r\n\r\n    // Enter a new mode.\r\n    if (node) {\r\n      currentChildren.push(node)\r\n      stack.push(currentChildren)\r\n      currentChildren = node.children\r\n    }\r\n\r\n    top = Object.create(mode, {parent: {value: top}})\r\n  }\r\n\r\n  // Process the buffer.\r\n  function processBuffer() {\r\n    var result = top.subLanguage ? processSubLanguage() : processKeywords()\r\n    modeBuffer = ''\r\n    return result\r\n  }\r\n\r\n  // Process a sublanguage (returns a list of nodes).\r\n  function processSubLanguage() {\r\n    var explicit = typeof top.subLanguage === 'string'\r\n    var subvalue\r\n\r\n    /* istanbul ignore if - support non-loaded sublanguages */\r\n    if (explicit && !languages[top.subLanguage]) {\r\n      return addText(modeBuffer, [])\r\n    }\r\n\r\n    if (explicit) {\r\n      subvalue = coreHighlight(\r\n        top.subLanguage,\r\n        modeBuffer,\r\n        true,\r\n        prefix,\r\n        continuations[top.subLanguage]\r\n      )\r\n    } else {\r\n      subvalue = autoHighlight(modeBuffer, {\r\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\r\n        prefix: prefix\r\n      })\r\n    }\r\n\r\n    // If we couldn’t highlight, for example because the requests subset isn’t\r\n    // loaded, return a text node.\r\n    if (!subvalue.language) {\r\n      return [buildText(modeBuffer)]\r\n    }\r\n\r\n    // Counting embedded language score towards the host language may be\r\n    // disabled with zeroing the containing mode relevance.\r\n    // Usecase in point is Markdown that allows XML everywhere and makes every\r\n    // XML snippet to have a much larger Markdown score.\r\n    if (top.relevance > 0) {\r\n      relevance += subvalue.relevance\r\n    }\r\n\r\n    if (explicit) {\r\n      continuations[top.subLanguage] = subvalue.top\r\n    }\r\n\r\n    return [build(subvalue.language, subvalue.value, true)]\r\n  }\r\n\r\n  // Process keywords. Returns nodes.\r\n  function processKeywords() {\r\n    var nodes = []\r\n    var lastIndex\r\n    var keyword\r\n    var node\r\n    var submatch\r\n\r\n    if (!top.keywords) {\r\n      return addText(modeBuffer, nodes)\r\n    }\r\n\r\n    lastIndex = 0\r\n\r\n    top.lexemesRe.lastIndex = 0\r\n\r\n    keyword = top.lexemesRe.exec(modeBuffer)\r\n\r\n    while (keyword) {\r\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes)\r\n\r\n      submatch = keywordMatch(top, keyword)\r\n\r\n      if (submatch) {\r\n        relevance += submatch[1]\r\n\r\n        node = build(submatch[0], [])\r\n\r\n        nodes.push(node)\r\n\r\n        addText(keyword[0], node.children)\r\n      } else {\r\n        addText(keyword[0], nodes)\r\n      }\r\n\r\n      lastIndex = top.lexemesRe.lastIndex\r\n      keyword = top.lexemesRe.exec(modeBuffer)\r\n    }\r\n\r\n    addText(modeBuffer.substr(lastIndex), nodes)\r\n\r\n    return nodes\r\n  }\r\n\r\n  // Add siblings.\r\n  function addSiblings(siblings, nodes) {\r\n    var length = siblings.length\r\n    var index = -1\r\n    var sibling\r\n\r\n    while (++index < length) {\r\n      sibling = siblings[index]\r\n\r\n      if (sibling.type === 'text') {\r\n        addText(sibling.value, nodes)\r\n      } else {\r\n        nodes.push(sibling)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add a text.\r\n  function addText(value, nodes) {\r\n    var tail\r\n\r\n    if (value) {\r\n      tail = nodes[nodes.length - 1]\r\n\r\n      if (tail && tail.type === 'text') {\r\n        tail.value += value\r\n      } else {\r\n        nodes.push(buildText(value))\r\n      }\r\n    }\r\n\r\n    return nodes\r\n  }\r\n\r\n  // Build a text.\r\n  function buildText(value) {\r\n    return {type: 'text', value: value}\r\n  }\r\n\r\n  // Build a span.\r\n  function build(name, contents, noPrefix) {\r\n    return {\r\n      type: 'element',\r\n      tagName: 'span',\r\n      properties: {\r\n        className: [(noPrefix ? '' : prefix) + name]\r\n      },\r\n      children: contents\r\n    }\r\n  }\r\n\r\n  // Check if the first word in `keywords` is a keyword.\r\n  function keywordMatch(mode, keywords) {\r\n    var keyword = keywords[0]\r\n\r\n    if (language[keyInsensitive]) {\r\n      keyword = keyword.toLowerCase()\r\n    }\r\n\r\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword]\r\n  }\r\n\r\n  // Check if `lexeme` is illegal according to `mode`.\r\n  function isIllegal(lexeme, mode) {\r\n    return !ignore && test(mode.illegalRe, lexeme)\r\n  }\r\n\r\n  // Check if `lexeme` ends `mode`.\r\n  function endOfMode(mode, lexeme) {\r\n    if (test(mode.endRe, lexeme)) {\r\n      while (mode.endsParent && mode.parent) {\r\n        mode = mode.parent\r\n      }\r\n\r\n      return mode\r\n    }\r\n\r\n    if (mode.endsWithParent) {\r\n      return endOfMode(mode.parent, lexeme)\r\n    }\r\n  }\r\n\r\n  // Check a sub-mode.\r\n  function subMode(lexeme, mode) {\r\n    var values = mode.contains\r\n    var length = values.length\r\n    var index = -1\r\n\r\n    while (++index < length) {\r\n      if (test(values[index].beginRe, lexeme)) {\r\n        return values[index]\r\n      }\r\n    }\r\n  }\r\n\r\n  // Exit the current context.\r\n  function pop() {\r\n    /* istanbul ignore next - removed in hljs 9.3 */\r\n    currentChildren = stack.pop() || children\r\n  }\r\n}\r\n\r\nfunction expandMode(mode) {\r\n  var length\r\n  var index\r\n  var variants\r\n  var result\r\n\r\n  if (mode.variants && !mode[keyCachedVariants]) {\r\n    variants = mode.variants\r\n    length = variants.length\r\n    index = -1\r\n    result = []\r\n\r\n    while (++index < length) {\r\n      result[index] = inherit(mode, {variants: null}, variants[index])\r\n    }\r\n\r\n    mode[keyCachedVariants] = result\r\n  }\r\n\r\n  return (\r\n    mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode])\r\n  )\r\n}\r\n\r\n// Compile a language.\r\nfunction compileLanguage(language) {\r\n  compileMode(language)\r\n\r\n  // Compile a language mode, optionally with a parent.\r\n  // eslint-disable-next-line complexity\r\n  function compileMode(mode, parent) {\r\n    var compiledKeywords = {}\r\n    var terminators\r\n\r\n    if (mode.compiled) {\r\n      return\r\n    }\r\n\r\n    mode.compiled = true\r\n\r\n    mode.keywords = mode.keywords || mode.beginKeywords\r\n\r\n    if (mode.keywords) {\r\n      if (typeof mode.keywords === 'string') {\r\n        flatten('keyword', mode.keywords)\r\n      } else {\r\n        Object.keys(mode.keywords).forEach(function(className) {\r\n          flatten(className, mode.keywords[className])\r\n        })\r\n      }\r\n\r\n      mode.keywords = compiledKeywords\r\n    }\r\n\r\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true)\r\n\r\n    if (parent) {\r\n      if (mode.beginKeywords) {\r\n        mode.begin =\r\n          '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b'\r\n      }\r\n\r\n      if (!mode.begin) {\r\n        mode.begin = /\\B|\\b/\r\n      }\r\n\r\n      mode.beginRe = langRe(mode.begin)\r\n\r\n      if (!mode.end && !mode.endsWithParent) {\r\n        mode.end = /\\B|\\b/\r\n      }\r\n\r\n      if (mode.end) {\r\n        mode.endRe = langRe(mode.end)\r\n      }\r\n\r\n      mode.terminatorEnd = source(mode.end) || ''\r\n\r\n      if (mode.endsWithParent && parent.terminatorEnd) {\r\n        mode.terminatorEnd +=\r\n          (mode.end ? verticalBar : '') + parent.terminatorEnd\r\n      }\r\n    }\r\n\r\n    if (mode.illegal) {\r\n      mode.illegalRe = langRe(mode.illegal)\r\n    }\r\n\r\n    if (mode.relevance === undefined) {\r\n      mode.relevance = 1\r\n    }\r\n\r\n    if (!mode.contains) {\r\n      mode.contains = []\r\n    }\r\n\r\n    mode.contains = concat.apply(\r\n      [],\r\n      mode.contains.map(function(c) {\r\n        return expandMode(c === 'self' ? mode : c)\r\n      })\r\n    )\r\n\r\n    mode.contains.forEach(function(c) {\r\n      compileMode(c, mode)\r\n    })\r\n\r\n    if (mode.starts) {\r\n      compileMode(mode.starts, parent)\r\n    }\r\n\r\n    terminators = mode.contains\r\n      .map(map)\r\n      .concat([mode.terminatorEnd, mode.illegal])\r\n      .map(source)\r\n      .filter(Boolean)\r\n\r\n    mode.terminators =\r\n      terminators.length === 0\r\n        ? {exec: execNoop}\r\n        : langRe(terminators.join(verticalBar), true)\r\n\r\n    function map(c) {\r\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin\r\n    }\r\n\r\n    // Flatten a classname.\r\n    function flatten(className, value) {\r\n      var pairs\r\n      var pair\r\n      var index\r\n      var length\r\n\r\n      if (language[keyInsensitive]) {\r\n        value = value.toLowerCase()\r\n      }\r\n\r\n      pairs = value.split(space)\r\n      length = pairs.length\r\n      index = -1\r\n\r\n      while (++index < length) {\r\n        pair = pairs[index].split(verticalBar)\r\n\r\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1]\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a regex for `value`.\r\n  function langRe(value, global) {\r\n    return new RegExp(\r\n      source(value),\r\n      'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : '')\r\n    )\r\n  }\r\n\r\n  // Get the source of an expression or string.\r\n  function source(re) {\r\n    return (re && re.source) || re\r\n  }\r\n}\r\n\r\n// Normalize a syntax result.\r\nfunction normalize(result) {\r\n  return {\r\n    relevance: result.relevance || 0,\r\n    language: result.language || null,\r\n    value: result.value || []\r\n  }\r\n}\r\n\r\n// Check if `expression` matches `lexeme`.\r\nfunction test(expression, lexeme) {\r\n  var match = expression && expression.exec(lexeme)\r\n  return match && match.index === 0\r\n}\r\n\r\n// No-op exec.\r\nfunction execNoop() {\r\n  return null\r\n}\r\n\r\n// Get a language by `name`.\r\nfunction getLanguage(name) {\r\n  name = name.toLowerCase()\r\n\r\n  return languages[name] || languages[aliases[name]]\r\n}\r\n"]},"metadata":{},"sourceType":"script"}