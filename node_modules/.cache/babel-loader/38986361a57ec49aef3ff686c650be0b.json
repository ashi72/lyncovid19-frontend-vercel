{"ast":null,"code":"'use strict';\n\nmodule.exports = stylus;\nstylus.displayName = 'stylus';\nstylus.aliases = [];\n\nfunction stylus(Prism) {\n  ;\n\n  (function (Prism) {\n    var inside = {\n      url: /url\\(([\"']?).*?\\1\\)/i,\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      number: /\\b\\d+(?:\\.\\d+)?%?/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: [// We want non-word chars around \"-\" because it is\n      // accepted in property names.\n      /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n      punctuation: /[{}()\\[\\];:,]/\n    };\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^{|}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    };\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    };\n    Prism.languages.stylus = {\n      comment: {\n        pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      'atrule-declaration': {\n        pattern: /(^\\s*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/refractor/lang/stylus.js"],"names":["module","exports","stylus","displayName","aliases","Prism","inside","url","string","pattern","greedy","interpolation","func","important","keyword","lookbehind","hexcode","number","boolean","operator","punctuation","alias","delimiter","rest","function","languages","comment","atrule","variable","statement","property","selector"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nmodule.exports = stylus\r\nstylus.displayName = 'stylus'\r\nstylus.aliases = []\r\nfunction stylus(Prism) {\r\n  ;(function(Prism) {\r\n    var inside = {\r\n      url: /url\\(([\"']?).*?\\1\\)/i,\r\n      string: {\r\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\r\n        greedy: true\r\n      },\r\n      interpolation: null,\r\n      // See below\r\n      func: null,\r\n      // See below\r\n      important: /\\B!(?:important|optional)\\b/i,\r\n      keyword: {\r\n        pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\r\n        lookbehind: true\r\n      },\r\n      hexcode: /#[\\da-f]{3,6}/i,\r\n      number: /\\b\\d+(?:\\.\\d+)?%?/,\r\n      boolean: /\\b(?:true|false)\\b/,\r\n      operator: [\r\n        // We want non-word chars around \"-\" because it is\r\n        // accepted in property names.\r\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\r\n      ],\r\n      punctuation: /[{}()\\[\\];:,]/\r\n    }\r\n    inside['interpolation'] = {\r\n      pattern: /\\{[^\\r\\n}:]+\\}/,\r\n      alias: 'variable',\r\n      inside: {\r\n        delimiter: {\r\n          pattern: /^{|}$/,\r\n          alias: 'punctuation'\r\n        },\r\n        rest: inside\r\n      }\r\n    }\r\n    inside['func'] = {\r\n      pattern: /[\\w-]+\\([^)]*\\).*/,\r\n      inside: {\r\n        function: /^[^(]+/,\r\n        rest: inside\r\n      }\r\n    }\r\n    Prism.languages.stylus = {\r\n      comment: {\r\n        pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\r\n        lookbehind: true\r\n      },\r\n      'atrule-declaration': {\r\n        pattern: /(^\\s*)@.+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          atrule: /^@[\\w-]+/,\r\n          rest: inside\r\n        }\r\n      },\r\n      'variable-declaration': {\r\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          variable: /^\\S+/,\r\n          rest: inside\r\n        }\r\n      },\r\n      statement: {\r\n        pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          keyword: /^\\S+/,\r\n          rest: inside\r\n        }\r\n      },\r\n      // A property/value pair cannot end with a comma or a brace\r\n      // It cannot have indented content unless it ended with a semicolon\r\n      'property-declaration': {\r\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          property: {\r\n            pattern: /^[^\\s:]+/,\r\n            inside: {\r\n              interpolation: inside.interpolation\r\n            }\r\n          },\r\n          rest: inside\r\n        }\r\n      },\r\n      // A selector can contain parentheses only as part of a pseudo-element\r\n      // It can span multiple lines.\r\n      // It must end with a comma or an accolade or have indented content.\r\n      selector: {\r\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\r\n        lookbehind: true,\r\n        inside: {\r\n          interpolation: inside.interpolation,\r\n          punctuation: /[{},]/\r\n        }\r\n      },\r\n      func: inside.func,\r\n      string: inside.string,\r\n      interpolation: inside.interpolation,\r\n      punctuation: /[{}()\\[\\];:.]/\r\n    }\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}