{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\r\n  Add support for variables inside double quoted strings\r\n  Add support for {php}\r\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->)(?!\\d)\\w+/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: [{\n        pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n        lookbehind: true\n      }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    }; // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n      var smartyLitteralStart = '{literal}';\n      var smartyLitteralEnd = '{/literal}';\n      var smartyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLitteralEnd) {\n          smartyLitteralMode = false;\n        }\n\n        if (!smartyLitteralMode) {\n          if (match === smartyLitteralStart) {\n            smartyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["C:/Users/aaron/Documents/lyncovid19-frontend-vercel/node_modules/refractor/lang/smarty.js"],"names":["refractorMarkupTemplating","require","module","exports","smarty","displayName","aliases","Prism","register","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":"AAAA;;AACA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAD,CAAvC;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,yBAAf;AACA;;;;AADA;;AAKC,GAAC,UAASO,KAAT,EAAgB;AAChBA,IAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyB;AACvBM,MAAAA,OAAO,EAAE,kBADc;AAEvBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAE,UADA;AAETC,QAAAA,KAAK,EAAE;AAFE,OAFY;AAMvBC,MAAAA,MAAM,EAAE,kCANe;AAOvBC,MAAAA,MAAM,EAAE,0DAPe;AAQvBC,MAAAA,QAAQ,EAAE,CACR,aADQ,EAER,aAFQ,EAGR;AACEJ,QAAAA,OAAO,EAAE,kBADX;AAEEK,QAAAA,UAAU,EAAE;AAFd,OAHQ,EAOR;AACEL,QAAAA,OAAO,EAAE,qBADX;AAEEK,QAAAA,UAAU,EAAE;AAFd,OAPQ,CARa;AAoBvBC,MAAAA,QAAQ,EAAE,CACR;AACEN,QAAAA,OAAO,EAAE,oBADX;AAEEK,QAAAA,UAAU,EAAE;AAFd,OADQ,EAKR,eALQ,EAMR,iBANQ,CApBa;AA4BvB,mBAAa;AACX;AACAL,QAAAA,OAAO,EAAE,0BAFE;AAGXO,QAAAA,MAAM,EAAE;AACNH,UAAAA,QAAQ,EAAE;AACRJ,YAAAA,OAAO,EAAE,iBADD;AAERK,YAAAA,UAAU,EAAE;AAFJ,WADJ;AAKNG,UAAAA,QAAQ,EAAE;AALJ;AAHG,OA5BU;AAuCvBC,MAAAA,WAAW,EAAE,CAAC,iBAAD,CAvCU;AAwCvBD,MAAAA,QAAQ,EAAE,CACR,kCADQ,EAER,gDAFQ,EAGR,gDAHQ,CAxCa;AA6CvBE,MAAAA,OAAO,EAAE;AA7Cc,KAAzB,CADgB,CA+Cd;;AACFf,IAAAA,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAASC,GAAT,EAAc;AAC/C,UAAIC,aAAa,GAAG,gCAApB;AACA,UAAIC,mBAAmB,GAAG,WAA1B;AACA,UAAIC,iBAAiB,GAAG,YAAxB;AACA,UAAIC,kBAAkB,GAAG,KAAzB;AACAtB,MAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCqB,iBAArC,CACEL,GADF,EAEE,QAFF,EAGEC,aAHF,EAIE,UAASK,KAAT,EAAgB;AACd;AACA,YAAIA,KAAK,KAAKH,iBAAd,EAAiC;AAC/BC,UAAAA,kBAAkB,GAAG,KAArB;AACD;;AACD,YAAI,CAACA,kBAAL,EAAyB;AACvB,cAAIE,KAAK,KAAKJ,mBAAd,EAAmC;AACjCE,YAAAA,kBAAkB,GAAG,IAArB;AACD;;AACD,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OAhBH;AAkBD,KAvBD,EAhDgB,CAuEb;;AACHtB,IAAAA,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAASC,GAAT,EAAc;AAC9ClB,MAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCuB,oBAArC,CAA0DP,GAA1D,EAA+D,QAA/D;AACD,KAFD;AAGD,GA3EA,EA2EElB,KA3EF;AA4EF","sourcesContent":["'use strict'\r\nvar refractorMarkupTemplating = require('./markup-templating.js')\r\nmodule.exports = smarty\r\nsmarty.displayName = 'smarty'\r\nsmarty.aliases = []\r\nfunction smarty(Prism) {\r\n  Prism.register(refractorMarkupTemplating)\r\n  /* TODO\r\nAdd support for variables inside double quoted strings\r\nAdd support for {php}\r\n*/\r\n  ;(function(Prism) {\r\n    Prism.languages.smarty = {\r\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\r\n      delimiter: {\r\n        pattern: /^\\{|\\}$/i,\r\n        alias: 'punctuation'\r\n      },\r\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\r\n      variable: [\r\n        /\\$(?!\\d)\\w+/,\r\n        /#(?!\\d)\\w+#/,\r\n        {\r\n          pattern: /(\\.|->)(?!\\d)\\w+/,\r\n          lookbehind: true\r\n        },\r\n        {\r\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\r\n          lookbehind: true\r\n        }\r\n      ],\r\n      function: [\r\n        {\r\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\r\n          lookbehind: true\r\n        },\r\n        /^\\/?(?!\\d)\\w+/,\r\n        /(?!\\d)\\w+(?=\\()/\r\n      ],\r\n      'attr-name': {\r\n        // Value is made optional because it may have already been tokenized\r\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\r\n        inside: {\r\n          variable: {\r\n            pattern: /(=\\s*)(?!\\d)\\w+/,\r\n            lookbehind: true\r\n          },\r\n          operator: /=/\r\n        }\r\n      },\r\n      punctuation: [/[\\[\\]().,:`]|->/],\r\n      operator: [\r\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\r\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\r\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\r\n      ],\r\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\r\n    } // Tokenize all inline Smarty expressions\r\n    Prism.hooks.add('before-tokenize', function(env) {\r\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\r\n      var smartyLitteralStart = '{literal}'\r\n      var smartyLitteralEnd = '{/literal}'\r\n      var smartyLitteralMode = false\r\n      Prism.languages['markup-templating'].buildPlaceholders(\r\n        env,\r\n        'smarty',\r\n        smartyPattern,\r\n        function(match) {\r\n          // Smarty tags inside {literal} block are ignored\r\n          if (match === smartyLitteralEnd) {\r\n            smartyLitteralMode = false\r\n          }\r\n          if (!smartyLitteralMode) {\r\n            if (match === smartyLitteralStart) {\r\n              smartyLitteralMode = true\r\n            }\r\n            return true\r\n          }\r\n          return false\r\n        }\r\n      )\r\n    }) // Re-insert the tokens after tokenizing\r\n    Prism.hooks.add('after-tokenize', function(env) {\r\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\r\n    })\r\n  })(Prism)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}