{"ast":null,"code":"module.exports = function (hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/\n    }, {\n      begin: '\\'\\\\\\\\?.',\n      end: '\\'',\n      illegal: '.'\n    }]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<[^\\n>]*>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignof constexpr decltype ' + 'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([PREPROCESSOR, {\n      begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      // This mode covers expression context where we can't expect a function\n      // definition and shouldn't highlight anything that looks like one:\n      // `return some()`, `else if()`, `(x*sum(1, 2))`\n      variants: [{\n        begin: /=/,\n        end: /;/\n      }, {\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }],\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat([{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }]),\n      relevance: 0\n    }, {\n      className: 'function',\n      begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n      returnBegin: true,\n      end: /[{;=]/,\n      excludeEnd: true,\n      keywords: CPP_KEYWORDS,\n      illegal: /[^\\w\\s\\*&]/,\n      contains: [{\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [hljs.TITLE_MODE],\n        relevance: 0\n      }, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: CPP_KEYWORDS,\n          relevance: 0,\n          contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n        }]\n      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/aaron/Documents/final-final-lyncovid-frontend/new-lynbrook-frontend/node_modules/lowlight/node_modules/highlight.js/lib/languages/cpp.js"],"names":["module","exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"mappings":"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","sourcesContent":["module.exports = function(hljs) {\r\n  var CPP_PRIMITIVE_TYPES = {\r\n    className: 'keyword',\r\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\r\n  };\r\n\r\n  var STRINGS = {\r\n    className: 'string',\r\n    variants: [\r\n      {\r\n        begin: '(u8?|U|L)?\"', end: '\"',\r\n        illegal: '\\\\n',\r\n        contains: [hljs.BACKSLASH_ESCAPE]\r\n      },\r\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ },\r\n      {\r\n        begin: '\\'\\\\\\\\?.', end: '\\'',\r\n        illegal: '.'\r\n      }\r\n    ]\r\n  };\r\n\r\n  var NUMBERS = {\r\n    className: 'number',\r\n    variants: [\r\n      { begin: '\\\\b(0b[01\\']+)' },\r\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\r\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\r\n    ],\r\n    relevance: 0\r\n  };\r\n\r\n  var PREPROCESSOR =       {\r\n    className: 'meta',\r\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\r\n    keywords: {\r\n      'meta-keyword':\r\n        'if else elif endif define undef warning error line ' +\r\n        'pragma ifdef ifndef include'\r\n    },\r\n    contains: [\r\n      {\r\n        begin: /\\\\\\n/, relevance: 0\r\n      },\r\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\r\n      {\r\n        className: 'meta-string',\r\n        begin: /<[^\\n>]*>/, end: /$/,\r\n        illegal: '\\\\n',\r\n      },\r\n      hljs.C_LINE_COMMENT_MODE,\r\n      hljs.C_BLOCK_COMMENT_MODE\r\n    ]\r\n  };\r\n\r\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\r\n\r\n  var CPP_KEYWORDS = {\r\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' +\r\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\r\n      'unsigned long volatile static protected bool template mutable if public friend ' +\r\n      'do goto auto void enum else break extern using asm case typeid ' +\r\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\r\n      'switch continue inline delete alignof constexpr decltype ' +\r\n      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +\r\n      'atomic_bool atomic_char atomic_schar ' +\r\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\r\n      'atomic_ullong new throw return ' +\r\n      'and or not',\r\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\r\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\r\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +\r\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\r\n      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\r\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\r\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\r\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\r\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\r\n    literal: 'true false nullptr NULL'\r\n  };\r\n\r\n  var EXPRESSION_CONTAINS = [\r\n    CPP_PRIMITIVE_TYPES,\r\n    hljs.C_LINE_COMMENT_MODE,\r\n    hljs.C_BLOCK_COMMENT_MODE,\r\n    NUMBERS,\r\n    STRINGS\r\n  ];\r\n\r\n  return {\r\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\r\n    keywords: CPP_KEYWORDS,\r\n    illegal: '</',\r\n    contains: EXPRESSION_CONTAINS.concat([\r\n      PREPROCESSOR,\r\n      {\r\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\r\n        keywords: CPP_KEYWORDS,\r\n        contains: ['self', CPP_PRIMITIVE_TYPES]\r\n      },\r\n      {\r\n        begin: hljs.IDENT_RE + '::',\r\n        keywords: CPP_KEYWORDS\r\n      },\r\n      {\r\n        // This mode covers expression context where we can't expect a function\r\n        // definition and shouldn't highlight anything that looks like one:\r\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\r\n        variants: [\r\n          {begin: /=/, end: /;/},\r\n          {begin: /\\(/, end: /\\)/},\r\n          {beginKeywords: 'new throw return else', end: /;/}\r\n        ],\r\n        keywords: CPP_KEYWORDS,\r\n        contains: EXPRESSION_CONTAINS.concat([\r\n          {\r\n            begin: /\\(/, end: /\\)/,\r\n            keywords: CPP_KEYWORDS,\r\n            contains: EXPRESSION_CONTAINS.concat(['self']),\r\n            relevance: 0\r\n          }\r\n        ]),\r\n        relevance: 0\r\n      },\r\n      {\r\n        className: 'function',\r\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\r\n        returnBegin: true, end: /[{;=]/,\r\n        excludeEnd: true,\r\n        keywords: CPP_KEYWORDS,\r\n        illegal: /[^\\w\\s\\*&]/,\r\n        contains: [\r\n          {\r\n            begin: FUNCTION_TITLE, returnBegin: true,\r\n            contains: [hljs.TITLE_MODE],\r\n            relevance: 0\r\n          },\r\n          {\r\n            className: 'params',\r\n            begin: /\\(/, end: /\\)/,\r\n            keywords: CPP_KEYWORDS,\r\n            relevance: 0,\r\n            contains: [\r\n              hljs.C_LINE_COMMENT_MODE,\r\n              hljs.C_BLOCK_COMMENT_MODE,\r\n              STRINGS,\r\n              NUMBERS,\r\n              CPP_PRIMITIVE_TYPES,\r\n              // Count matching parentheses.\r\n              {\r\n                begin: /\\(/, end: /\\)/,\r\n                keywords: CPP_KEYWORDS,\r\n                relevance: 0,\r\n                contains: [\r\n                  'self',\r\n                  hljs.C_LINE_COMMENT_MODE,\r\n                  hljs.C_BLOCK_COMMENT_MODE,\r\n                  STRINGS,\r\n                  NUMBERS,\r\n                  CPP_PRIMITIVE_TYPES\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          hljs.C_LINE_COMMENT_MODE,\r\n          hljs.C_BLOCK_COMMENT_MODE,\r\n          PREPROCESSOR\r\n        ]\r\n      },\r\n      {\r\n        className: 'class',\r\n        beginKeywords: 'class struct', end: /[{;:]/,\r\n        contains: [\r\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\r\n          hljs.TITLE_MODE\r\n        ]\r\n      }\r\n    ]),\r\n    exports: {\r\n      preprocessor: PREPROCESSOR,\r\n      strings: STRINGS,\r\n      keywords: CPP_KEYWORDS\r\n    }\r\n  };\r\n};"]},"metadata":{},"sourceType":"script"}